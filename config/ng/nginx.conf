user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    log_format demoapp escape=json '{"msec":"$msec", "time_local": "$time_iso8601", "remote_addr": "$remote_addr", "remote_user": "$remote_user", "request_method": "$request_method","request": "$request", "request_body": "$request_body", "status": "$status", "body_bytes_sent": "$body_bytes_sent", "http_referer": "$http_referer", "http_user_agent": "$http_user_agent",  "host": "$host", "http_x_forwarded_for": "$http_x_forwarded_for", "request_time": "$request_time", "remote_port": "$remote_port", "upstream_response_time": "$upstream_response_time", "http_x_readtime": "$http_x_readtime", "uri": "$uri", "request_id": "$http_request_id", "request_length":"$request_length", "upstream_http_location": "$upstream_http_location"}';

    access_log  /var/log/nginx/access.log  demoapp;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 4096;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.

    #include /etc/nginx/conf.d/*.conf;

    upstream demoapp {
      @NG_CONF_APP_UPSTREAM@
    }

    # 额外的upstream配置
    #include nginx-upstream.conf;

    server {
        listen       80;
        listen       [::]:80;
        server_name  _;
        gzip_buffers 4 16k;      #设置gzip申请内存的大小,其作用是按块大小的倍数申请内存空间,param2:int(k) 后面单位是k。这里设置以16k为单位,按照原始数据大小, 以16k为单位的4倍申请内存
        gzip_http_version 1.1;   #识别http协议的版本,早起浏览器可能不支持gzip自解压,用户会看到乱码
        gzip_comp_level 9;       #设置gzip压缩等级，等级越底压缩速度越快文件压缩比越小，反之速度越慢文件压缩比越大；等级1-9，最小的压缩最快 但是消耗cpu
        gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php application/javascript;
        gzip_vary on;            #启用应答头"Vary: Accept-Encoding"

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        error_page 404 /404.html;
        location = /404.html {
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
        }

        location / {
            proxy_pass http://demoapp/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr; #保留代理之前的真实客户端ip
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #记录代理过程
            proxy_set_header X-Server-Address $server_addr;
            proxy_set_header X-Host-Address @DOCKER_HOST_ADDRESS@;
        }

        # 静态文件配置
        location /static/ {
           root /usr/share/nginx/html;
        }

        location /assets/ {
           root /usr/share/nginx/html;
        }

        location /assets {
            alias /data/app/front/assets;
        }

        # 额外的location配置
        #include nginx-location.conf;
    }

    # nginx 监控需要
    # https://github.com/nginxinc/nginx-prometheus-exporter
    server {
        listen  81;
        location /nginx_status {
            stub_status on;
            access_log off;
            #allow 127.0.0.1;  #only allow requests from localhost
            #deny all;   #deny all other hosts
        }
    }
}